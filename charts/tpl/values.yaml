# Default values for helmchart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

##! Made a one-liner to substitute env values from .env into a helm values.yaml
##! Helm doesnt support env values in helm charts and felt like bad practice but it works
##!  (export $(sed "/^\$\|^#/d" .env | xargs); envsubst < helmchart/values.yaml)

replicaCount: &replicaCount 1

image: &image
  repository: registry.codeopensrc.com/os/react-template/app
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: &imagePullSecrets []
nameOverride: &nameOverride ""
fullnameOverride: &fullnameOverride ""

serviceAccount: &serviceAccount
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: &podAnnotations {}

podSecurityContext: &podSecurityContext {}
  # fsGroup: 2000

securityContext: &securityContext {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service: &service
  type: ClusterIP
  ports:
    - servicePort: 80
      targetContainerPortName: http

ingress: &ingress
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: &resources {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling: &autoscaling
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: &nodeSelector {}

tolerations: &tolerations []

affinity: &affinity {}



### Custom additions

containerPorts: &containerPorts
  - name: http
    port: 80
    #proto: TCP

## TODO: More config/support more types
## For now only supports 1 basic httpGet probe config
containerProbe: &containerProbe
  enabled: true
  path: /healthcheck
  #port: http
  #initialDelaySeconds: 10
  #failureThreshold: 30
  httpHeaders:
    - name: Host
      value: localhost

useStatefulSet: &useStatefulSet false
statefulSetPodManagementPolicy: &statefulSetPodManagementPolicy ""

deployMinReadySeconds: &deployMinReadySeconds 3
stsMinReadySeconds: &stsMinReadySeconds 3

job: &job
  enabled: false
  #ttlSecondsAfterFinished: 120
  annotations:
    # post-install runs after all resources in "ready" state
    "helm.sh/hook": "post-install"
  image:
    repository: busybox
    pullPolicy: Always
    tag: ""
  backoffLimit: 0
  restartPolicy: Never
  command:
  - bash
  - -c
  - echo "test"

svcDiscovery: &svcDiscovery
  consul:
    enabled: false
    #ttlSecondsAfterFinished: 20
    annotations:
      # pre-install to have a service available to register check with
      "helm.sh/hook": "pre-install"
    postannotations:
      "helm.sh/hook": "pre-delete"
    image:
      repository: alpine
      pullPolicy: Always
      tag: ""
    backoffLimit: 0
    restartPolicy: Never
    env: {}
    #  CONSUL_HOST: "172.17.0.1"
    #  CONSUL_PORT: "8500"
    command:
    - bash
    - -c
    - echo "test"

persistence: &persistence
  statefulset:
    #volumeClaimTemplateName: database
    volumeClaimTemplate:
      #helmResourcePolicy: "keep"
      accessModes: ["ReadWriteOnce"]
      volumeMode: Filesystem #Or "Block" (uncommon)
      #storageClassName: ""
      resources:
        requests:
          storage: 1Gi
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
  deployment:
    enabled: false
    volumeTemplate:
      #name: logclaim
      #helmResourcePolicy: "keep"
      accessModes: ["ReadWriteOnce"]
      volumeMode: Filesystem #Or "Block" (uncommon)
      #storageClassName: ""
      persistentVolumeReclaimPolicy: Delete
      resources:
        requests:
          storage: 1Gi
      persistentVolumeType:
        local:
          path: /data
      nodeAffinity:
        - key: kubernetes.io/hostname
          values:
            - minikube
  storageClasses:
  - name: local-storage
    #volumeBindingMode: WaitForFirstConsumer
    provisioner: "kubernetes.io/no-provisioner"
    parameters: []


volumeClaimMounts: &volumeClaimMounts []
#  - name: database
#    mountPath: /data/db
#    subPath: db

volumeMounts: &volumeMounts []
#  - name: shared-logs
#    mountPath: /var/log
#    mountType: 
#      emptyDir: {}
#  - name: mongoconf
#    mountPath: /etc/mongo
#    mountType: 
#      configMap:
#        name: mongod.conf

lifecyclePostStartCommand: &lifecyclePostStartCommand []
#  ["sh", "-c", "npm run reloader > /var/log/hotreload.log &"]


additionalContainers: &additionalContainers []
#  - name: hotreload-logger
#    image: busybox
#    command: ["sh", "-c", 
#      "while [ ! -f /var/log/hotreload.log ]; do sleep 1; done; \
#       tail -f /var/log/hotreload.log"
#    ]
#    volumeMounts:
#      - name: shared-logs
#        mountPath: /var/log

## NOTE: Always leave empty in values.yaml
## Can pass in .env using `--set-file dotEnvFile=.env`
dotEnvFile: &dotEnvFile ""

secretStringData: &secretStringData {}
#  MONGO_DB_NAME: "react"
#  SAMPLE_SECRET: "SAMPLE_SECRET_ENV_VAR"

configMapData: &configMapData {}
#  DEV_DATABASE_URL_ORIGIN: "mongodb://react-db:27017"
#  ENABLE_DB:               "false"


##! create* creates and does NOT auto attach to the deployment
##! attach* will NOT create but attach existing external resources to the deployment
##! createAndAttach* will create AND attach to the deployment
##! Using create* and attach* to create AND attach caused the lookup function
##!  to use the old values and require 2 deployments to correctly reflect the update.
##!  Thus the need for createAndAttach*.

createExtraSecrets: &createExtraSecrets []
#  - name: extrasecret1
#    stringData:
#      SECRETK1: secret_val1

createExtraConfigMaps: &createExtraConfigMaps []
#  - name: extracm1
#    data:
#      ENVK1: env_val1

##! attach* hash annotations will be static in `helm template` due to the lookup function
##! lookup() is used to update hashs for when any external cms/secrets change
##! https://helm.sh/docs/chart_template_guide/functions_and_pipelines/#using-the-lookup-function
attachExtraSecrets: &attachExtraSecrets []
#  - name: extrasecret1
attachExtraConfigMaps: &attachExtraConfigMaps []
#  - name: extracm1

##! Opens up these resources to possibly be consumed by other resources
##!  separately from configMapData and secretStringData
createAndAttachExtraConfigMaps: &createAndAttachExtraConfigMaps []
#  - name: extracm1
#    data:
#      ENVK1: env_val1

createAndAttachExtraSecrets: &createAndAttachExtraSecrets []
#  - name: extrasecret1
#    stringData:
#      SECRETK1: secret_val1

createFileConfigMaps: &createFileConfigMaps
#  - name: mongod.conf
#    content:
#      net:
#        port: 27017
#        bindIp: 0.0.0.0

ciLabels: &ciLabels {}
ciAnnotations: &ciAnnotations {}



## Was part of another idea
## Not necessary but keeping around in case a use case pops up
template: &template
  enabled: false
  replicaCount: *replicaCount
  image: *image
  imagePullSecrets: *imagePullSecrets
  nameOverride: *nameOverride
  fullnameOverride: *fullnameOverride
  serviceAccount: *serviceAccount
  podAnnotations: *podAnnotations
  podSecurityContext: *podSecurityContext
  securityContext: *securityContext
  service: *service
  ingress: *ingress
  resources: *resources
  autoscaling: *autoscaling
  nodeSelector: *nodeSelector
  tolerations: *tolerations
  affinity: *affinity
  containerPorts: *containerPorts
  containerProbe: *containerProbe
  useStatefulSet: *useStatefulSet
  statefulSetPodManagementPolicy: *statefulSetPodManagementPolicy
  deployMinReadySeconds: &deployMinReadySeconds
  stsMinReadySeconds: &stsMinReadySeconds
  job: *job
  svcDiscovery: *svcDiscovery
  persistence: *persistence
  volumeClaimMounts: *volumeClaimMounts
  volumeMounts: *volumeMounts
  lifecyclePostStartCommand: *lifecyclePostStartCommand
  additionalContainers: *additionalContainers
  dotEnvFile: *dotEnvFile
  secretStringData: *secretStringData
  configMapData: *configMapData
  createExtraSecrets: *createExtraSecrets
  createExtraConfigMaps: *createExtraConfigMaps
  attachExtraSecrets: *attachExtraSecrets
  attachExtraConfigMaps: *attachExtraConfigMaps
  createAndAttachExtraConfigMaps: *createAndAttachExtraConfigMaps
  createAndAttachExtraSecrets: *createAndAttachExtraSecrets
  createFileConfigMaps: *createFileConfigMaps
  ciLabels: *ciLabels
  ciAnnotations: *ciAnnotations
