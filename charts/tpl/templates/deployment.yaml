{{- if eq (default false .Values.useStatefulSet) false }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "react-template.fullname" . }}
  labels:
    {{- include "react-template.labels" . | nindent 4 }}
    {{- with .Values.ciLabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    {{- if .Values.configMapData }}
    configHash: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    {{- end }}
    {{- range .Values.createAndAttachExtraConfigMaps }}
    {{ .name }}Hash: {{ include (print $.Template.BasePath "/auxConfigmap.yaml") $ | sha256sum }}
    {{- end }}
    {{- range .Values.attachExtraConfigMaps }}
    {{- if (lookup "v1" "ConfigMap" $.Release.Namespace .name) }}
    {{ .name }}Hash: {{ (lookup "v1" "ConfigMap" $.Release.Namespace .name).data | toString | sha256sum }}
    {{- end }}
    {{- end }}
    {{- if .Values.secretStringData }}
    secretHash: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
    {{- end }}
    {{- if .Values.dotEnvFile }}
    dotEnvFileHash: {{ include (print $.Template.BasePath "/dotEnvSecret.yaml") . | sha256sum }}
    {{- end }}
    {{- range .Values.createAndAttachExtraSecrets }}
    {{ .name }}Hash: {{ include (print $.Template.BasePath "/auxSecret.yaml") $ | sha256sum }}
    {{- end }}
    {{- range .Values.attachExtraSecrets }}
    {{- if (lookup "v1" "Secret" $.Release.Namespace .name) }}
    {{ .name }}Hash: {{ (lookup "v1" "Secret" $.Release.Namespace .name).stringData | toString | sha256sum }}
    {{- end }}
    {{- end }}
    {{- with .Values.ciAnnotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- if semverCompare ">=1.23-0" .Capabilities.KubeVersion.GitVersion }}
  minReadySeconds: {{ default 3 .Values.deployMinReadySeconds }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 0
  selector:
    matchLabels:
      {{- include "react-template.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "react-template.selectorLabels" . | nindent 8 }}
        {{- with .Values.ciLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- include "react-template.imageTagLabel" . | nindent 8 }}
      annotations:
        {{- if .Values.configMapData }}
        configHash: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- range .Values.createAndAttachExtraConfigMaps }}
        {{ .name }}Hash: {{ include (print $.Template.BasePath "/auxConfigmap.yaml") $ | sha256sum }}
        {{- end }}
        {{- range .Values.attachExtraConfigMaps }}
        {{- if (lookup "v1" "ConfigMap" $.Release.Namespace .name) }}
        {{ .name }}Hash: {{ (lookup "v1" "ConfigMap" $.Release.Namespace .name).data | toString | sha256sum }}
        {{- end }}
        {{- end }}
        {{- if .Values.secretStringData }}
        secretHash: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.dotEnvFile }}
        dotEnvFileHash: {{ include (print $.Template.BasePath "/dotEnvSecret.yaml") . | sha256sum }}
        {{- end }}
        {{- range .Values.createAndAttachExtraSecrets }}
        {{ .name }}Hash: {{ include (print $.Template.BasePath "/auxSecret.yaml") $ | sha256sum }}
        {{- end }}
        {{- range .Values.attachExtraSecrets }}
        {{- if (lookup "v1" "Secret" $.Release.Namespace .name) }}
        {{ .name }}Hash: {{ (lookup "v1" "Secret" $.Release.Namespace .name).stringData | toString | sha256sum }}
        {{- end }}
        {{- end }}
        {{- with .Values.ciAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "react-template.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                {{- $selectorLabelList := regexSplit "\n" (include "react-template.selectorLabels" .) -1 }}
                {{- range $ind, $label := $selectorLabelList }}
                - key: {{ regexSplit ":" $label -1 | first | trim }}
                  operator: In
                  values:
                  - {{ regexSplit ":" $label -1 | last | trim }}
                {{- end }}
              topologyKey: "kubernetes.io/hostname"
            weight: 100
      terminationGracePeriodSeconds: 10
      containers:
        - name: {{ include "react-template.fullname" . }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.command }}
          command: 
            {{- toYaml .Values.command | nindent 12 }}
          {{- end }}
          ports:
            {{- range .Values.containerPorts }}
            - name: {{ .name }}
              containerPort: {{ .port }}
              protocol: {{ default "TCP" .proto }}
            {{- end }}
          {{- if .Values.containerProbe.enabled }}
          {{- range $probename, $probe := .Values.containerProbe.probes }}
          {{- if $probe.enabled }}
          {{ $probename }}:
            {{- if eq (default "http" $.Values.containerProbe.type) "http" }}
            httpGet:
              path: {{ default "/" $.Values.containerProbe.http.path }}
              port: {{ default "http" $.Values.containerProbe.port }}
              {{- with $.Values.containerProbe.http.headers }}
              httpHeaders:
                {{- toYaml . | nindent 16 }}
              {{- end }}
            {{- else if eq $.Values.containerProbe.type "tcp" }}
            tcpSocket:
              port: {{ default "http" $.Values.containerProbe.port }}
            {{- else if eq $.Values.containerProbe.type "grpc" }}
            grpc:
              {{- $grpcPort := default 80 $.Values.containerProbe.port }}
              {{- if eq ($grpcPort | int) 0 }}
              {{ fail "if containerProbe.type is grpc, containerProbe.port cannot be a named port" }}
              {{- else }}
              port: {{ $grpcPort | int }}
              {{- end }}
            {{- else if eq $.Values.containerProbe.type "exec" }}
            exec:
              command: 
                {{- toYaml $.Values.containerProbe.exec.command | nindent 16 }}
            {{- else }}
              {{- fail (cat (println "if containerProbe.enabled set to true")
                "containerProbe.type must be one of [http tcp exec grpc]") }}
            {{- end }}
            failureThreshold: {{ $probe.failureThreshold }}
            periodSeconds: {{ $probe.periodSeconds }}
            successThreshold: {{ $probe.successThreshold }}
            timeoutSeconds: {{ $probe.timeoutSeconds }}
            {{- if and (ne $probename "startupProbe") (not $.Values.containerProbe.probes.startupProbe.enabled) }}
            initialDelaySeconds: {{ $probe.initialDelaySeconds }}
            {{- end }}
          {{- end }}
          {{- end }}
          {{- end }}
          env:
            - name: IMAGE_TAG
              value: {{ default .Chart.AppVersion (include "react-template.imageTag" .) | quote }}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- if .Values.svcDiscovery.consul.enabled }}
            - name: CONSUL_HOST
              value: {{ default "172.17.0.1" (get .Values.svcDiscovery.consul.env "CONSUL_HOST") | quote }}
            - name: CONSUL_PORT
              value: {{ default "8500" (get .Values.svcDiscovery.consul.env "CONSUL_PORT") | quote }}
            - name: CONSUL_SERVICE_NAME
              value: {{ include "react-template.fullname" . }}
            - name: REGISTER_CHECK
              value: "true"
            {{- end }}
          envFrom:
            {{- if .Values.secretStringData }}
            - secretRef:
                name: {{ include "react-template.fullname" . }}
            {{- end }}
            {{- range concat .Values.createAndAttachExtraSecrets .Values.attachExtraSecrets }}
            - secretRef:
                name: {{ .name }}
            {{- end }}
            {{- if .Values.configMapData }}
            - configMapRef:
                name: {{ include "react-template.fullname" . }}
            {{- end }}
            {{- range concat .Values.createAndAttachExtraConfigMaps .Values.attachExtraConfigMaps }}
            - configMapRef:
                name: {{ .name }}
            {{- end }}
            {{- if .Values.dotEnvFile }}
            - secretRef:
                name: {{ include "react-template.fullname" . }}-dotenv
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.lifecyclePostStartCommand }}
          lifecycle:
            postStart:
              exec:
                command: 
                  {{- toYaml .Values.lifecyclePostStartCommand | nindent 18 }}
          {{- end }}
          volumeMounts:
            {{- range .Values.volumeMounts }}
            {{- if ne .attach false }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
            {{- end }}
            {{- end }}
            {{- range .Values.volumeClaimMounts }}
            - mountPath: {{ .mountPath }}
              name: {{ default (include "react-template.fullname" $) .name }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
            {{- end }}
        {{- range .Values.additionalContainers }}
        - name: {{ .name }}
          image: {{ .image }}
          command: 
            {{- toYaml .command | nindent 12 }}
          volumeMounts:
            {{- range .volumeMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
            {{- end }}
            {{- range $.Values.volumeClaimMounts }}
            - mountPath: {{ .mountPath }}
              name: {{ default (include "react-template.fullname" $) .name }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
            {{- end }}
          {{- with .env }}
          env:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- end }}
      volumes:
        {{- range .Values.volumeMounts }}
        {{- if .mountType }}
        - name: {{ .name }}
          {{- toYaml .mountType | nindent 10 }}
        {{- end }}
        {{- end }}
        {{- if .Values.persistence.deployment.enabled }}
        - persistentVolumeClaim:
            claimName: {{ include "react-template.fullname" . }}
          name: {{ include "react-template.fullname" . }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
