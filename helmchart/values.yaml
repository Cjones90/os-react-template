# Default values for helmchart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2

image:
  repository: registry.codeopensrc.com/os/react-template/app
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  ports:
    - servicePort: 80
      targetContainerPortName: http

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}



### Custom additions

##! Made a one-liner to substitute env values from .env into a helm values.yaml
##! Helm doesnt support env values in helm charts and felt like bad practice but it works
##!  (export $(sed "/^\$\|^#/d" .env | xargs); envsubst < helmchart/values.yaml)

containerPorts: 
  - name: http
    port: 80
containerProbe:
  path: /healthcheck
  httpHeaders:
    - name: Host
      value: localhost

## Can pass in .env using `--set-file dotEnvFile=.env`
dotEnvFile: ""

secretStringData:
  MONGO_DB_NAME: "react"
  SAMPLE_SECRET: "SAMPLE_SECRET_ENV_VAR"

configMapData:
  CONSUL_SERVICE_NAME:     "react"
  CONSUL_HOST:             "172.17.0.1"
  REGISTER_SERVICE:        "false"
  DEV_DATABASE_URL_ORIGIN: "mongodb://mongodb-tmpdb:27017"
  ENABLE_DB:               "false"


##! create* creates and does NOT auto attach to the deployment
##! attach* will NOT create but attach existing external resources to the deployment
##! createAndAttach* will create AND attach to the deployment
##! Using create* and attach* to create AND attach caused the lookup function
##!  to use the old values and require 2 deployments to correctly reflect the update.
##!  Thus the need for createAndAttach*.

createExtraSecrets: []
#  - name: extrasecret1
#    stringData:
#      SECRETK1: secret_val1

createExtraConfigMaps: []
#  - name: extracm1
#    data:
#      ENVK1: env_val1

##! attach* hash annotations will be static in `helm template` due to the lookup function
##! lookup() is used to update hashs for when any external cms/secrets change
##! https://helm.sh/docs/chart_template_guide/functions_and_pipelines/#using-the-lookup-function
attachExtraSecrets: []
#  - name: extrasecret1
attachExtraConfigMaps: []
#  - name: extracm1

##! Opens up these resources to possibly be consumed by other resources
##!  separately from configMapData and secretStringData
createAndAttachExtraConfigMaps: []
#  - name: extracm1
#    data:
#      ENVK1: env_val1

createAndAttachExtraSecrets: []
#  - name: extrasecret1
#    stringData:
#      SECRETK1: secret_val1

ciLabels: {}
ciAnnotations: {}
